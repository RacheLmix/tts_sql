-- üéØ C1: T·∫°o c∆° s·ªü d·ªØ li·ªáu t√™n l√† OnlineLearning
CREATE DATABASE OnlineLearning;

-- üéØ C2: X√≥a c∆° s·ªü d·ªØ li·ªáu OnlineLearning n·∫øu kh√¥ng c√≤n d√πng n·ªØa
DROP DATABASE IF EXISTS OnlineLearning;

-- Sau khi x√≥a, t·∫°o l·∫°i v√† s·ª≠ d·ª•ng CSDL
CREATE DATABASE OnlineLearning;
USE OnlineLearning;


CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    join_date DATE
);

CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    price INT
);

CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enroll_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

INSERT INTO Students (full_name, email, join_date) VALUES
('Nguyen Van A', 'a.nguyen@example.com', '2024-09-01'),
('Tran Thi B', 'b.tran@example.com', '2024-09-05'),
('Le Van C', 'c.le@example.com', '2024-09-10');

INSERT INTO Courses (title, description, price) VALUES
('SQL for Beginners', 'Introduction to SQL and relational databases.', 500000),
('Advanced Python', 'Deep dive into advanced Python topics.', 750000),
('Web Development', 'Learn to build websites with HTML, CSS, JS.', 650000);

INSERT INTO Enrollments (student_id, course_id) VALUES
(1, 1),
(1, 2),
(2, 1),
(3, 3);


-- üéØ C4: Th√™m c·ªôt status v√†o b·∫£ng Enrollments v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'active'
ALTER TABLE Enrollments
ADD COLUMN status VARCHAR(20) DEFAULT 'active';

-- üéØ C5: X√≥a b·∫£ng Enrollments n·∫øu kh√¥ng c√≤n c·∫ßn n·ªØa
-- (ch·ªâ ch·∫°y khi c·∫ßn x√≥a b·∫£ng)
-- DROP TABLE IF EXISTS Enrollments;

-- üéØ C6: T·∫°o VIEW StudentCourseView hi·ªÉn th·ªã danh s√°ch sinh vi√™n v√† t√™n kh√≥a h·ªçc h·ªç ƒë√£ ƒëƒÉng k√Ω
CREATE VIEW StudentCourseView AS
SELECT 
    s.student_id,
    s.full_name,
    c.course_id,
    c.title AS course_title,
    e.enroll_date,
    e.status
FROM 
    Enrollments e
JOIN Students s ON e.student_id = s.student_id
JOIN Courses c ON e.course_id = c.course_id;

-- üéØ C7: T·∫°o INDEX tr√™n c·ªôt title c·ªßa b·∫£ng Courses ƒë·ªÉ t·ªëi ∆∞u t√¨m ki·∫øm
CREATE INDEX idx_course_title ON Courses(title);
